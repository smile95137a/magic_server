<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiyuan.web.dao.BannerMapper">
  <resultMap id="BaseResultMap" type="com.qiyuan.web.entity.Banner">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="image_url" jdbcType="VARCHAR" property="imageUrl" />
    <result column="type" jdbcType="CHAR" property="type" />
    <result column="order" jdbcType="SMALLINT" property="order" />
    <result column="available_from" jdbcType="TIMESTAMP" property="availableFrom" />
    <result column="available_until" jdbcType="TIMESTAMP" property="availableUntil" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, image_url, type, order, available_from, available_until
  </sql>
  <select id="selectByExample" parameterType="com.qiyuan.web.entity.BannerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from banner
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from banner
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from banner
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qiyuan.web.entity.BannerExample">
    delete from banner
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qiyuan.web.entity.Banner">
    insert into banner (id, image_url, type, 
      order, available_from, available_until
      )
    values (#{id,jdbcType=INTEGER}, #{imageUrl,jdbcType=VARCHAR}, #{type,jdbcType=CHAR}, 
      #{order,jdbcType=SMALLINT}, #{availableFrom,jdbcType=TIMESTAMP}, #{availableUntil,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qiyuan.web.entity.Banner">
    insert into banner
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="imageUrl != null">
        image_url,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="order != null">
        order,
      </if>
      <if test="availableFrom != null">
        available_from,
      </if>
      <if test="availableUntil != null">
        available_until,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="imageUrl != null">
        #{imageUrl,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=CHAR},
      </if>
      <if test="order != null">
        #{order,jdbcType=SMALLINT},
      </if>
      <if test="availableFrom != null">
        #{availableFrom,jdbcType=TIMESTAMP},
      </if>
      <if test="availableUntil != null">
        #{availableUntil,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qiyuan.web.entity.BannerExample" resultType="java.lang.Long">
    select count(*) from banner
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update banner
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.imageUrl != null">
        image_url = #{record.imageUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.order != null">
        order = #{record.order,jdbcType=SMALLINT},
      </if>
      <if test="record.availableFrom != null">
        available_from = #{record.availableFrom,jdbcType=TIMESTAMP},
      </if>
      <if test="record.availableUntil != null">
        available_until = #{record.availableUntil,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update banner
    set id = #{record.id,jdbcType=INTEGER},
      image_url = #{record.imageUrl,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=CHAR},
      order = #{record.order,jdbcType=SMALLINT},
      available_from = #{record.availableFrom,jdbcType=TIMESTAMP},
      available_until = #{record.availableUntil,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiyuan.web.entity.Banner">
    update banner
    <set>
      <if test="imageUrl != null">
        image_url = #{imageUrl,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=CHAR},
      </if>
      <if test="order != null">
        order = #{order,jdbcType=SMALLINT},
      </if>
      <if test="availableFrom != null">
        available_from = #{availableFrom,jdbcType=TIMESTAMP},
      </if>
      <if test="availableUntil != null">
        available_until = #{availableUntil,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiyuan.web.entity.Banner">
    update banner
    set image_url = #{imageUrl,jdbcType=VARCHAR},
      type = #{type,jdbcType=CHAR},
      order = #{order,jdbcType=SMALLINT},
      available_from = #{availableFrom,jdbcType=TIMESTAMP},
      available_until = #{availableUntil,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>